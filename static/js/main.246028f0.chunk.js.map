{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx","logo.png"],"names":["App","Title","Typography","Paragraph","Header","Layout","Footer","Content","className","src","logo","height","alt","id","autoplay","dots","map","topic","key","style","marginTop","title","description","row","ri","toString","service","si","span","Meta","icon","MailOutlined","color","href","rel","target","TwitterOutlined","GithubOutlined","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"kXA0FeA,MAhFf,WAAgB,IACNC,EAAqBC,IAArBD,MAAOE,EAAcD,IAAdC,UACPC,EAA4BC,IAA5BD,OAAQE,EAAoBD,IAApBC,OAAQC,EAAYF,IAAZE,QAiCxB,OACE,kBAAC,IAAD,KACI,kBAACH,EAAD,CAAQI,UAAU,UACV,yBAAKC,IAAKC,IAAMC,OAAO,KAAKC,IAAI,SAChC,kBAACX,EAAD,CAAOY,GAAG,SAAV,oBAER,kBAACN,EAAD,CAASC,UAAU,WACf,kBAACL,EAAD,qGACA,kBAAC,IAAD,CAAUW,UAAQ,EAACC,MAAM,GAvCX,CACpB,oCACA,gCACA,wCACA,0BACA,sDAmC2BC,KAAI,SAAAC,GAAK,OACtB,wBAAIC,IAAKD,EAAOE,MAAO,CAACC,UAAW,QAASH,OAjC7C,CACf,CACI,CACII,MAAM,sBACNC,YAAa,6GAEjB,CACID,MAAO,mCACPC,YAAa,2GAGrB,CACI,CACID,MAAO,wCACPC,YAAY,wHAEhB,CACID,MAAO,0BACPC,YAAa,mIAkBHN,KAAI,SAACO,EAAKC,GAAN,OACV,kBAAC,IAAD,CAAKX,GAAIW,EAAGC,YACPF,EAAIP,KAAI,SAACU,EAASC,GAAV,OACL,kBAAC,IAAD,CAAKC,KAAM,GAAIf,GAAIc,EAAGF,YAClB,kBAAC,IAAD,KACI,kBAAC,IAAKI,KAAN,CACIR,MAAOK,EAAQL,MACfC,YAAaI,EAAQJ,wBAOjD,kBAAChB,EAAD,KACI,kBAACH,EAAD,8BAGA,kBAAC,IAAD,CAAK2B,KAAM,kBAACC,EAAA,EAAD,MAAkBC,MAAM,QAC/B,uBAAGC,KAAK,0BAA0BC,IAAI,sBAAsBC,OAAO,UAAnE,qBAEJ,kBAAC,IAAD,CAAKL,KAAM,kBAACM,EAAA,EAAD,MAAqBJ,MAAM,WAClC,uBAAGC,KAAK,+BAA+BC,IAAI,sBAAsBC,OAAO,UAAxE,cAEJ,kBAAC,IAAD,CAAKL,KAAM,kBAACO,EAAA,EAAD,MAAoBL,MAAM,SACjC,uBAAGC,KAAK,6BAA6BC,IAAI,sBAAsBC,OAAO,UAAtE,gBCvEIG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBEjJ5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.246028f0.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.png';\nimport './App.css';\nimport {Typography, Layout, Tag, Carousel, Row, Col, Card} from 'antd';\nimport {\n    TwitterOutlined,\n    GithubOutlined,\n    MailOutlined\n\n} from '@ant-design/icons';\nfunction App() {\n  const { Title, Paragraph } = Typography;\n  const { Header, Footer, Content } = Layout;\n\n  const topicsCarrousel = [\n      'Desenvolupament de programari web',\n      'Organització de Hackathons',\n      'Serveis de consultoria tecnològica',\n      'Disseny de hardware IoT',\n      'Desenvolupament d\\'apps per a dispositius mòbils'\n  ];\n\n  const services = [\n    [\n        {\n            title:\"Desenvolupament Web\",\n            description: \"Creem des de 0 les pàgines web més avançades amb els frameworks més moderns (Angular i React)\"\n        },\n        {\n            title: \"Desenvolupament d'Apps Mòbils\",\n            description: \"Desenvolupem aplicacions/frameworks natius per iOS i Android i també fem apps híbrides amb Ionic\"\n        }\n    ],\n    [\n        {\n            title: \"Arquitectura de Solucions al Núvol\",\n            description:\"Dissenyem sistemes complexos al núvol: bases de dades, servidors, clusters d'aplicacions containeritzades, etc...\"\n        },\n        {\n            title: \"Disseny de Sistemes IoT\",\n            description: \"Des d'una pulsera BLE a un VPN desplegat en una Raspberry Pi, ens encanten els projectes de IoT i l'electrònica en general\"\n        }\n    ]\n  ];\n\n  return (\n    <Layout>\n        <Header className=\"header\">\n                <img src={logo} height=\"50\" alt=\"logo\" />\n                <Title id=\"title\">Ciclion HackLab</Title>\n        </Header>\n        <Content className=\"content\">\n            <Paragraph>Ciclion és un espai de creativitat tecnològica enfocat al desenvolupament de projectes</Paragraph>\n            <Carousel autoplay dots={false}>\n                {topicsCarrousel.map(topic =>\n                    <h3 key={topic} style={{marginTop: '5px'}}>{topic}</h3>\n                )}\n            </Carousel>\n            {services.map((row, ri) =>\n                <Row id={ri.toString()}>\n                    {row.map((service, si) => \n                        <Col span={12} id={si.toString()}>\n                            <Card>\n                                <Card.Meta\n                                    title={service.title}\n                                    description={service.description}/>\n                            </Card>\n                        </Col>    \n                    )}\n                </Row>\n            )}\n        </Content>\n        <Footer>\n            <Paragraph>\n                Ens podeu contactar a\n            </Paragraph>\n            <Tag icon={<MailOutlined />} color=\"grey\">\n                <a href=\"mailto:hola@ciclion.com\" rel=\"noopener noreferrer\" target=\"_blank\">hola@ciclion.com</a>\n            </Tag>\n            <Tag icon={<TwitterOutlined />} color=\"#55acee\">\n                <a href=\"https://twitter.com/_ciclion\" rel=\"noopener noreferrer\" target=\"_blank\">@_ciclion</a>\n            </Tag>\n            <Tag icon={<GithubOutlined />} color=\"black\">\n                <a href=\"https://github.com/ciclion\" rel=\"noopener noreferrer\" target=\"_blank\">@ciclion</a>\n            </Tag>\n        </Footer>\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.f21367cc.png\";"],"sourceRoot":""}